/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop.ica.part2;


//import library
import java.util.Scanner;
import java.util.ArrayList;


//file reading libraries
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

//file writing libraries
import static java.nio.file.StandardOpenOption.*;
import java.nio.file.Path;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.BufferedOutputStream;

//table library
import javax.swing.table.TableColumn;


//import for images
import javax.swing.ImageIcon;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;


//library for java dialog box
import javax.swing.JOptionPane;

/**
 *
 * @author s3154679
 */
public class YoFishGUI extends javax.swing.JFrame {

    /**
     * Creates new form YoFishGUI
     */
    public YoFishGUI() {
        
                //load arraylist data, warn & exit if any error
        try {
            loadData();
            
            //check if arraylist is empty, if so warn and exit
            if (fishList.isEmpty()){
                //warn user and quit
                JOptionPane.showMessageDialog(null,
                            "\n!!! Data Error: no data loaded !!!\n" + "\n !!! Application Exiting...!!!\n" , 
                            "Load Data Error", 
                            JOptionPane.WARNING_MESSAGE);
                
                System.exit(0);
            }
            
        } 
        catch (FileNotFoundException ex){
            //warn user and quit
            JOptionPane.showMessageDialog(null,
                        "\n!!! File Error: " + ex.toString() + " !!!\n" + "\n !!! Application Exiting...!!!\n" , 
                        "FileNotFoundException", 
                        JOptionPane.WARNING_MESSAGE);
                
            System.exit(0);
        } 
        catch (IOException ex){
            //warn user and quit
            JOptionPane.showMessageDialog(null,
                        "\n!!! File Error: " + ex.toString() + " !!!\n" + "\n !!! Application Exiting...!!!\n" , 
                        "IOException", 
                        JOptionPane.WARNING_MESSAGE);
            
            System.exit(0);            
        }
        
        //invoke loadImages method
        loadImages();
        
        initComponents();
        
        //invoke initTable method
        initTable();
        
    }//end of GUI constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        yoFishTable = new javax.swing.JTable();
        picPanel = new javax.swing.JPanel();
        picLabel = new javax.swing.JLabel();
        itemLabel = new javax.swing.JLabel();
        buyButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Yo Fish System");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        yoFishTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        yoFishTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                yoFishTableMouseClicked(evt);
            }
        });
        yoFishTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                yoFishTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                yoFishTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(yoFishTable);

        picPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Photo"));
        picPanel.setPreferredSize(new java.awt.Dimension(300, 300));

        picLabel.setBackground(new java.awt.Color(0, 0, 0));
        picLabel.setForeground(new java.awt.Color(255, 255, 255));
        picLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        picLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        picLabel.setOpaque(true);

        itemLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout picPanelLayout = new javax.swing.GroupLayout(picPanel);
        picPanel.setLayout(picPanelLayout);
        picPanelLayout.setHorizontalGroup(
            picPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(picPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(picPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(itemLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(picPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(picLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 18, Short.MAX_VALUE)))
                .addContainerGap())
        );
        picPanelLayout.setVerticalGroup(
            picPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(picPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(picLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(itemLabel)
                .addContainerGap())
        );

        buyButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buyButton.setText("Buy");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        addButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        quitButton.setBackground(new java.awt.Color(255, 0, 0));
        quitButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        quitButton.setForeground(new java.awt.Color(255, 255, 255));
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        titlePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        titleLabel.setBackground(new java.awt.Color(255, 255, 255));
        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("YO FISH STOCK MANAGEMENT SYSTEM");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, titlePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111))
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(picPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(290, 290, 290))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(picPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyButton)
                    .addComponent(addButton)
                    .addComponent(quitButton))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        //invoke quit method
        quit();
    }//GEN-LAST:event_formWindowClosing

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        
        //invoke quit method
        quit();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void yoFishTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yoFishTableMouseClicked
        //get selected row and invoke view method
        fishIndex = yoFishTable.getSelectedRow();
        
        //invoke view method
        view();
    }//GEN-LAST:event_yoFishTableMouseClicked

    private void yoFishTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yoFishTableKeyPressed
        //get selected row and invoke view method
        fishIndex = yoFishTable.getSelectedRow();
        
        //invoke view method
        view();
    }//GEN-LAST:event_yoFishTableKeyPressed

    private void yoFishTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yoFishTableKeyReleased
        //get selected row and invoke view method
        fishIndex = yoFishTable.getSelectedRow();
        
        //invoke view method
        view();
    }//GEN-LAST:event_yoFishTableKeyReleased

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        //check if fish item is selected from table
        if(yoFishTable.getSelectedRow() >= 0){
            
            //check if stock is greater than zero
            int stock = fishList.get(fishIndex).getStock();
            String item = fishList.get(fishIndex).getItem();
            
            if(stock > 0){
                
                //create array to contain possible quantity of fish
                Integer [] quantity = new Integer[stock];
                
                //use for loop to populate the quantity
                for(int index = 0; index < stock; index++){
                    quantity[index] = index + 1;
                }
                
                //create input dialog using quantity array
                Object inputValue = JOptionPane.showInputDialog(jScrollPane1, 
                        "Please select quantity you wish to buy of: \n'"+ item +"'\n", 
                        "Quantity To Purchase",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        quantity,
                        quantity[0]
                        );
                
                //check input is not null
                if(inputValue != null){
                    //get input as an integer
                    int amount = (int)inputValue;
                    
                    //invoke buyFish method
                    buyFish(amount);
                    
                    String price = fishList.get(fishIndex).priceToString();
                    int itemStock = fishList.get(fishIndex).getStock();
                    
                    //show confirmation of sale
                    JOptionPane.showMessageDialog(jScrollPane1,
                            "\nItem: " +item+ "\n Price: " +price+ "\n Units bought: " +amount+ "\n Stock remaining: " +itemStock, 
                            "Confirmation of Sale", 
                            JOptionPane.INFORMATION_MESSAGE);
                    
                    //low stock check
                    checkStock();     
                }
                else{
                    //warn user 
                    JOptionPane.showMessageDialog(jScrollPane1, "\n '" + item + "' Purchase Cancelled!!", "Purchase Cancelled", JOptionPane.WARNING_MESSAGE);
                }   
            }
            else{
                //warn user 
                JOptionPane.showMessageDialog(jScrollPane1, "\n '" + item + "' is out of stock!", "Purchase Item Warning", JOptionPane.WARNING_MESSAGE);
            }
        }
        else{
            //warn user
            JOptionPane.showMessageDialog(jScrollPane1, "No item has been selected!", "Purchase Item Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_buyButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        
        //check if fish item is selected from table
        if(yoFishTable.getSelectedRow() >= 0){
            
            //Declare and initialize minimum and maximum quantities that can be added
            final int MINIMUM_QUANTITY = 5;
            final int MAXIMUM_QUANTITY = 20;
            
            //create array to contain possible quantity of fish
            Integer [] quantity = new Integer[(MAXIMUM_QUANTITY - MINIMUM_QUANTITY) + 1];

            //use for loop to populate the quantity
            for(int index = 0; index <= MAXIMUM_QUANTITY-MINIMUM_QUANTITY; index++){
                quantity[index] = index + MINIMUM_QUANTITY ;
            }
            
            //get current item
            String item = fishList.get(fishIndex).getItem();
            
            //create input dialog using quantity array
            Object inputValue = JOptionPane.showInputDialog(jScrollPane1, 
                    "Please select quantity you wish to add of: \n'"+ item +"'\n", 
                    "Quantity To Restock",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    quantity,
                    quantity[0]
                    );
            
            //check input is not null
            if(inputValue != null){
                //get input as an integer
                int amount = (int)inputValue;

                //invoke addFish method
                addFish(amount);

                int itemStock = fishList.get(fishIndex).getStock();

                //show confirmation of added stock
                JOptionPane.showMessageDialog(jScrollPane1,
                        "\nItem: " +item+ "\n Units added: " +amount+ "\n New stock quantity: " +itemStock, 
                        "Confirmation of Added Stock", 
                        JOptionPane.INFORMATION_MESSAGE);     
            }
            else{
                //warn user 
                JOptionPane.showMessageDialog(jScrollPane1, "'" + item + "' Restock Cancelled!!", "Add Stock Cancelled", JOptionPane.WARNING_MESSAGE);
            } 
        }
        else{
            //warn user
            JOptionPane.showMessageDialog(jScrollPane1, "No item has been selected!", "Add Stock Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(YoFishGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(YoFishGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(YoFishGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YoFishGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new YoFishGUI().setVisible(true);
            }
        });
    }
    
    
    
    /* -----START OF USER DEFINED METHODS------ */
    
    
     //method to populate the arraylist from an input file
    void loadData() throws IOException, FileNotFoundException {
        
        //put all input files path in a string array
        final String[] INPUT_FILE_PATHS={"yo-fish.txt", "pondlife.txt"};
        
        //YoFish input file
        File yoFishInputFile = new File( INPUT_FILE_PATHS[0] );
        
        //Pondlife input file
        File pondLifeInputFile = new File( INPUT_FILE_PATHS[1] );
        
        //Create file scanner for each file
        Scanner yoFishFileScanner, pondLifeFileScanner ; 

        if ( (yoFishInputFile.exists() && yoFishInputFile.isFile()) && (pondLifeInputFile.exists() && pondLifeInputFile.isFile()) ){
            
            //instantiate  filescanner to read inputfile
            yoFishFileScanner = new Scanner(yoFishInputFile);
            pondLifeFileScanner = new Scanner(pondLifeInputFile);
            
            //process yoFishInputFile
            while (yoFishFileScanner.hasNextLine()){
                //read line
                String line = yoFishFileScanner.nextLine().trim();

                //check line is not empty
                if ( ! line.isEmpty() ){
                    //get tokens from line
                    int id = Integer.parseInt(line.split(DELIMITER)[0]);
                    String item = line.split(DELIMITER)[1];
                    double price = Double.parseDouble(line.split(DELIMITER)[2]);
                    int stock = Integer.parseInt(line.split(DELIMITER)[3]);
                    double maxSize = Double.parseDouble(line.split(DELIMITER)[4]);
                    int lowTemp = Integer.parseInt(line.split(DELIMITER)[5]);
                    int highTemp = Integer.parseInt(line.split(DELIMITER)[6]);
                    

                    //add anonymous object to array list
                    fishList.add( new YoFishItem(id, item, price, stock, maxSize, lowTemp, highTemp) );
                }
            }//end of while loop
            
            //close file stream
            yoFishFileScanner.close();
            
            
            //process pondLifeInputFile
            while (pondLifeFileScanner.hasNextLine()){
                //read line
                String line = pondLifeFileScanner.nextLine().trim();

                //check line is not empty
                if ( ! line.isEmpty() ){
                    //get tokens from line
                    int num = Integer.parseInt(line.split(DELIMITER)[0]);
                    String product = line.split(DELIMITER)[1];
                    String notes = line.split(DELIMITER)[2];
                    double maxLength = Double.parseDouble(line.split(DELIMITER)[3]);
                    int minTemp = Integer.parseInt(line.split(DELIMITER)[4]);
                    int maxTemp = Integer.parseInt(line.split(DELIMITER)[5]);
                    double cost = Double.parseDouble(line.split(DELIMITER)[6]);
                    int stock = Integer.parseInt(line.split(DELIMITER)[7]);
                    
                    
                    // Create PondlifeProduct Object
                    pondlifeProduct = new PondlifeProduct(num, product, notes, maxLength, minTemp, maxTemp, cost, stock);
                    
                    
                    //supply pondlifeProduct to Adapter constructor
                    fishList.add(new PondlifeProductAdapter(pondlifeProduct));
                }
            }//end of while loop
            
            //close file stream
            pondLifeFileScanner.close();
            
        } else{
            //warn user and exit
            JOptionPane.showMessageDialog(null,
                        "\n!!! File Error: input file '" + pondLifeInputFile + "' not available !!!\n" + "\n !!! Application Exiting...!!!\n" , 
                        "Input File Error", 
                        JOptionPane.WARNING_MESSAGE);
            
            System.exit(0);
        }
        
    }//end of loadData
    
    
    
    //initialise table method
    void initTable(){
        //instantiate table model reference
        model = new YoFishTableModel(columnNames, fishList);
        
        //link the jtable to table model
        yoFishTable.setModel(model);
        
        
        //loop through each column of the table
        for(int colIndex = 0; colIndex < yoFishTable.getColumnCount(); colIndex++){
            //get current column 
            TableColumn column = yoFishTable.getTableHeader().getColumnModel().getColumn(colIndex);
            
            //set column title
            column.setHeaderValue(columnNames[colIndex]);
            
        }
        
    }//end of intiTable
    
    
    
    //load fish image files
    void loadImages(){
        //loop through main ArrayList
        for(YoFishItem fish: fishList){
            //get filename and create relative filepath
            String filepath = "pics/" + fish.getPicFilename();
            
            //create a buffered image object and set to null
            BufferedImage fishImage = null;
            
            //attempt to load image
            try{
                //read image file
                fishImage = ImageIO.read(new File(filepath));
            }
            catch(IOException e){
                //warn user
                JOptionPane.showMessageDialog(null,
                            "\n\n!!! Image Loading Error !!!!\n" , 
                            "Image Load IOException", 
                            JOptionPane.WARNING_MESSAGE);
            }
            finally{
                //add buffered image to ArrayList of images
                fishImageList.add(fishImage);
            }
        }
    }//end of loadImages method
   
    
    
    //view method
    void view(){
        
        //invoke displayImages method
        displayImages();
        
        //invoke displayItemLabel method
        displayItemLabel();
        
        // check stock and display warning if necessary
        checkStock();
        
    }//end of view
    
    
    
    //displayImages method
    void displayImages(){
        //clear any text or image in the pic label
        picLabel.setText("");
        picLabel.setIcon(null);
        
        //read image from image ArrayList
        BufferedImage image = fishImageList.get(fishIndex);
        
        
        //check if image cannot be read
        if(image == null){
            //get the current item in the table
            int item = fishList.get(fishIndex).getId();
            
            //set txt for missing image
            picLabel.setText("Image for fish " + item + " not found");
        }
        else{
            //create an image icon out of the image
            ImageIcon icon = new ImageIcon(image);
            
            //display image by adding the image icon to the pic label
            picLabel.setIcon(icon);
        }
    }//end of displayImages 
    
    
    
    //displayItemLabel method
    void displayItemLabel(){
        //clear any text or image in the pic label
        itemLabel.setText("");
        
        //get the current item in the table
        String item = fishList.get(fishIndex).getItem();
        
        //set the item label text
        itemLabel.setText(item);   
    }//end of displayItemLabel
    
    
    
    //method to check stock levels
    void checkStock(){
        //get stock of selected item
        int stockLevel = fishList.get(fishIndex).getStock();
        
        if(stockLevel < 5){
            String item = fishList.get(fishIndex).getItem();
            String message = "'" + item + "' has only " +stockLevel+ " units of stock remaining";
            JOptionPane.showMessageDialog(jScrollPane1, message,
                    "Low Stock Warning", JOptionPane.WARNING_MESSAGE);
            
        }
    }//end of checkStock
    
    
    
    //method to perform buy operation
    void buyFish(int quantity){
        //calculate and set new stock value
        int stock = fishList.get(fishIndex).getStock() - quantity;
        
        fishList.get(fishIndex).setStock(stock);
        
        //update stock value on the table
        model.setValueAt(stock, fishIndex, 3);
        
    }//end of buyFish
    
    
    
    //method to perform add operation
    void addFish(int quantity){
        //calculate and set new stock value
        int stock = fishList.get(fishIndex).getStock() + quantity;
        fishList.get(fishIndex).setStock(stock);
        
        //update stock value on the table
        model.setValueAt(stock, fishIndex, 3);
        
    }//end of addFish
    
    
    
    //method to save arraylist data to an output file
    void saveData() throws IOException, FileNotFoundException {
        //local variables
        final String OUTPUT_FILE_PATH = "output.txt";
        Path path = Paths.get(OUTPUT_FILE_PATH);
        
        //delete file if it exits
        Files.deleteIfExists(path); 

        //create buffered output stream
        BufferedOutputStream output = new
                BufferedOutputStream(Files.newOutputStream(path, CREATE,WRITE));

	//output string
	String report = "";
		
        //loop through arraylist
        for (YoFishItem fish: fishList){
            //add each field of current fish object to string, followed by delimiter		
            report += fish.getId() + DELIMITER;
            report += fish.getItem() + DELIMITER;
            report += fish.getPrice() + DELIMITER;
            report += fish.getStock() + DELIMITER;
            report += fish.getMaxSize() + DELIMITER;
            report += fish.getLowTemp() + DELIMITER;
            report += fish.getHighTemp() + "\r\n";  
        }//end of for-loop	
  
        //transform output string to byte array
        byte data[] = report.getBytes();

        //write byte array to the stream
        output.write(data, 0, data.length);

        //close buffer so stream writes to file
        output.close();

        //confirm data written
        JOptionPane.showMessageDialog(jScrollPane1,
                "Data written to file at: \n" + path.toAbsolutePath().toString() , 
                "Data Saved Confirmation", 
                JOptionPane.INFORMATION_MESSAGE);
    }//end of saveData
    
    
    
    //quit method
    void quit(){
        
        //check if user really want to quit
        int quitStatus = JOptionPane.showConfirmDialog(jScrollPane1,
                "Click 'OK' button to confirm Quit request",
                "Confirm Quit Request",
                JOptionPane.OK_CANCEL_OPTION
        );
        
        //Proceed if the user clicked OK button
        if(quitStatus == JOptionPane.OK_OPTION){
            try{
            //attempt to save data
            saveData();	
            } 
            catch (FileNotFoundException e) {
                //warn user
                JOptionPane.showMessageDialog(jScrollPane1,
                            "\n\n!!!!! Output Error: Unable to open output file !!!!!\n" + e.getMessage() + "\n" , 
                            "Save Data FileNotFoundException", 
                            JOptionPane.WARNING_MESSAGE);
            } 
            catch (IOException e) {
                //warn user
                JOptionPane.showMessageDialog(jScrollPane1,
                            "\n\n!!!!! Output Error: File write error !!!!!\n" + e.getMessage() + "\n", 
                            "Save Data IOException", 
                            JOptionPane.WARNING_MESSAGE);
            } 
            finally {
                //end message and quit
                JOptionPane.showMessageDialog(jScrollPane1,
                "\n### Thank you. Program will terminate. ###\n\n", 
                "Quit Message", 
                JOptionPane.INFORMATION_MESSAGE);
                
                System.exit(0);
            }
        }
        
    } //end of method
    
    
    /* -----END OF USER DEFINED METHODS------ */
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton buyButton;
    private javax.swing.JLabel itemLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel picLabel;
    private javax.swing.JPanel picPanel;
    private javax.swing.JButton quitButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JTable yoFishTable;
    // End of variables declaration//GEN-END:variables


//class level object variables that can be used by different methods
    private ArrayList<YoFishItem> fishList = new ArrayList<>();
    
    private PondlifeProduct pondlifeProduct;
    private final String DELIMITER = ",";
    private int fishIndex=0;
    private String[] columnNames = {"ID", "ITEM", "PRICE", "STOCK", "MAX SIZE", "LOW TEMP", "HIGH TEMP"};
    private YoFishTableModel model;
    private ArrayList<BufferedImage> fishImageList = new ArrayList<>();
    

}//end main class
